
graph synth  [[main]]
{
    input event std::midi::Message midiIn;

    //MAIN PARAMETERS
    input event float32 masterGain      [[ name: "Master Gain", min: 0, max: 1, init: 1.0, step: 0.01 ]];
    input event float32 masterOctave    [[ name: "Master Octave",  min: -3, max: 3,  init: 0, step: 1 ]];
    input event float32 masterGlide     [[ name: "Master Glide",   min: 0,  max: 3,  init: 0, step: 0.01 ]];
    
    //OSCILLATOR
    //synth needs an oscillator which has a certain shape, detune, volumne and pitch
    input event float32 oscSemitones    [[ name: "OSC Semitones",  min: -24, max: 24,  init: 0,   step: 1 ]];
    input event float32 oscDetune       [[ name: "OSC Detune",     min: -50, max: 50,  init: 0,   step: 1 ]];
    input event float32 oscLevel        [[ name: "OSC Level",      min: 0,   max: 1,   init: 1,   step: 0.001 ]];
    input event float32 oscShape        [[ name: "OSC Shape",      min: 0,   max: 4,   init: 3,   text: "Sine|Triangle|Square|Ramp Up|Ramp Down"]];

    /*FILTER
    input event float32 filterCutoff    [[ name: "Filter Cutoff",    min: 100,  max: 20000, init: 1500, step: 1 ]];
    input event float32 filterResonance [[ name: "Filter Resonance", min: 0,    max: 100,   init: 1, step: 1 ]];
    input event float32 filterType      [[ name: "Filter Type",      min: 0,   max: 4,   init: 0,   text: "None|Low-pass|High-pass|Bandpass|Notch"]]; */

    //ENVELOPE
    input event float32 oscAttack      [[ name: "Attack",  min: 0, max: 10,  init: 0.1,   step: 0.01 ]];
    input event float32 oscDecay       [[ name: "Decay",   min: 0, max: 10,  init: 1.0,   step: 0.01 ]];
    input event float32 oscSustain     [[ name: "Sustain", min: 0, max: 100, init: 100.0, step: 1 ]];
    input event float32 oscRelease     [[ name: "Release", min: 0, max: 10,  init: 2.0,   step: 0.01 ]];

    //EFFECTS
   /* input event float32 reverb      [[ name: "Attack",  min: 0, max: 10,  init: 0.1,   step: 0.01 ]];
    input event float32 delay       [[ name: "Decay",   min: 0, max: 10,  init: 1.0,   step: 0.01 ]];
    input event float32 chorus     [[ name: "Sustain", min: 0, max: 100, init: 100.0, step: 1 ]];
    input event float32 distortion     [[ name: "Sustain", min: 0, max: 100, init: 100.0, step: 1 ]]; */


    output stream float out;

    node frequencyGenerator = FrequencyGenerator;
    node adsrGenerator = AdsrGenerator;
    node osc = Oscillator;
    node gain = Gain;

    connection {

        midiIn -> std::midi::MPEConverter -> EventProcessor ->  frequencyGenerator.eventIn,
                                                                adsrGenerator.eventIn;


        oscAttack  -> adsrGenerator.attack;
        oscDecay   -> adsrGenerator.decay;
        oscSustain -> adsrGenerator.sustain;
        oscRelease -> adsrGenerator.release;

        oscSemitones   -> osc.semitonesIn;
        oscDetune      -> osc.detuneIn;
        oscLevel       -> osc.levelIn;
        oscShape       -> osc.shapeIn;
        masterOctave     -> osc.octaveIn;

        frequencyGenerator.note -> osc.noteIn;

        (adsrGenerator.out * osc.out) -> gain.in;
        masterGain -> gain.level;
        gain.out -> out;
                                                               
    }

}

processor EventProcessor
{
    input event (std::notes::NoteOn, std::notes::NoteOff) eventIn;
    output event (std::notes::NoteOn, std::notes::NoteOff) eventOut;

    event eventIn (std::notes::NoteOn n)
    {
        notes[head] = n;
        head++;
        activeNotes++;
        eventOut <- n;
    }

    event eventIn (std::notes::NoteOff n)
    {
        {
            wrap<bufferSize> source;
            wrap<bufferSize> target;

            loop (int (head))
            {
                if (notes[source].pitch != n.pitch)
                {
                    notes[target] = notes[source];
                    target++;
                }
                else
                {
                    activeNotes--;
                }

                source++;
            }

            head = target;
        }

        if (activeNotes != 0)
            eventOut <- notes.at (head-1);
        else
            eventOut <- n;
    }

    let bufferSize = 10;

    std::notes::NoteOn[bufferSize] notes;
    wrap<bufferSize> head;
    var activeNotes = 0;
}


processor FrequencyGenerator
{
    input event std::notes::NoteOn eventIn;
    input event float glideIn;

    output event float32 note;

    event glideIn (float e)
    {
        glideSeconds = e;
    }

    event eventIn (std::notes::NoteOn e)
    {
        targetNote = e.pitch;
        framesToApplyIncrement = (glideSeconds > 0) ? int (processor.frequency * glideSeconds) : 1;
        noteIncrement = (targetNote - currentNote) / framesToApplyIncrement;
    }

    float glideSeconds = 0.0f;

    float currentNote;
    float targetNote;
    float noteIncrement;
    int   framesToApplyIncrement;

    void main()
    {
        note <- currentNote;

        loop
        {
            if (framesToApplyIncrement > 0)
            {
                currentNote += noteIncrement;
                framesToApplyIncrement--;
                note <- currentNote;
            }

            advance();
        }
    }
}


graph Oscillator
{
    input event float32 octaveIn, noteIn, semitonesIn, detuneIn;
    input event float32 levelIn;
    input event float32 shapeIn;

    output stream float out;

    node osc                = std::oscillators::PolyblepOscillator (float32, std::oscillators::Shape::sine);
    node frequencyProcessor = FrequencyProcessor;
    node gain               = Gain (1.0f);

    connection
    {
        octaveIn -> frequencyProcessor.octaveIn;
        noteIn -> frequencyProcessor.noteIn;
        semitonesIn -> frequencyProcessor.semitonesIn;
        detuneIn    -> frequencyProcessor.detuneIn;

        frequencyProcessor.frequencyOut -> osc.frequencyIn;
        shapeIn                         -> osc.shapeIn;

        osc.out -> gain.in;
        levelIn -> gain.level;

        gain.out -> out;
    }
}


processor Gain (float32 scalingFactor = 1.0f, float32 smoothingTimeSeconds = 0.02f)
{
    input stream float32 in;
    input event float32 level;

    output stream float32 out;

    event level (float32 newTarget)
    {
        smoothedValue.setTarget (newTarget, max (1, int32 (smoothingTimeSeconds / float32 (processor.period))));
    }

    void main()
    {
        loop
        {
            out <- in * smoothedValue.getNext() * scalingFactor;
            advance();
        }
    }

    std::smoothing::SmoothedValue smoothedValue;
}


processor FrequencyProcessor
{
    input event float32 noteIn, semitonesIn, detuneIn, octaveIn;
    output event float32 frequencyOut;


    event octaveIn (float f)        { octave = f * 12.0f;   frequencyOut <- std::notes::noteToFrequency (octave + note + semitones + detune); }
    event noteIn (float f)          { note = f;             frequencyOut <- std::notes::noteToFrequency (octave + note + semitones + detune); }
    event semitonesIn (float f)     { semitones = f;        frequencyOut <- std::notes::noteToFrequency (octave + note + semitones + detune); }
    event detuneIn (float f)        { detune = f * 0.01f;   frequencyOut <- std::notes::noteToFrequency (octave + note + semitones + detune); }

    float octave, note, semitones, detune;
}



processor AdsrGenerator
    {
    input event (std::notes::NoteOn, std::notes::NoteOff) eventIn;
    input event float attack;
    input event float decay;
    input event float sustain;
    input event float release;

    output stream float32 out;

    event eventIn (std::notes::NoteOn e)    { noteReceived = true; triggered = true; }
    event eventIn (std::notes::NoteOff e)   { triggered = false; }

    event attack (float seconds)            { attackRamp = 1.0 / (processor.frequency * max (minTime, seconds)); }
    event decay (float seconds)             { decayMultiplier = pow (0.0001, 1.0 / (processor.frequency * max (minTime, seconds))); }
    event sustain (float levelPercent)      { sustainLevel = levelPercent * 0.01; }
    event release (float seconds)           { releaseMultiplier = pow (0.0001, 1.0 / (processor.frequency * max (minTime, seconds))); }

    float32 minTime = 0.001f;

    float64 attackRamp = 0.01;
    float64 decayMultiplier = 0.99;
    float64 sustainLevel = 1;
    float64 releaseMultiplier = 0.999;

    bool noteReceived = false;
    bool triggered = false;

    void main()
    {
        float64 currentValue;

        loop
        {
            if (noteReceived)
            {
                noteReceived = false;

                // Attack
                while (currentValue < 1.0 && triggered && ! noteReceived)
                {
                    currentValue = min (currentValue + attackRamp, 1.0);
                    out <- float (currentValue);
                    advance();
                }

                // Decay
                while (currentValue >= sustainLevel && triggered && ! noteReceived)
                {
                    currentValue *= decayMultiplier;
                    out <- float (currentValue);
                    advance();
                }

                // Sustain
                while (triggered && ! noteReceived)
                {
                    out <- float (currentValue);
                    advance();
                }
            }

            // Release
            currentValue *= releaseMultiplier;
            out <- float (currentValue);
            advance();
        }
    }
}